#!/bin/bash



# Open the current .xcworkspace or .xcodeproj
xc() {
    if [[ -n $1 ]]; then
        open "$1"
        return
    fi

    workspace=$(find . -name '*.xcworkspace' -maxdepth 1)
    project=$(find . -name '*.xcodeproj' -maxdepth 1)

    if [[ -n $workspace ]]; then
        open "$workspace"
    elif [[ -n $project ]]; then
        open "$project"
    else
        echo "No .xcworkspace or .xcodeproj found in the working directory."
    fi
}

pastegist() {
    open "$(gist -pP '$@')"
}

# Exctracts the repo slug from github. Works with https:// and git@ schemes.
github_slug(){
    print ${${$(git ls-remote --get-url)##*github.com(:|/)}%.git}
}

# Opens the file:line in github
open_in_github() {
    branch="${$(git branch | grep \*)#'* '}"
    hub browse -- "blob/$branch/$1#L$2"
}

# Code search repos across a github organization or user.
# Usage:
#     $ cs actionTimestampMs
cs() {
    github_slug=${${$(git ls-remote --get-url)##*github.com(:|/)}%.git}
    org=${github_slug%/*}
    open "https://github.com/search?q=org%3A$org+$1&type=Code"
}

# Creates a pull request on Github against the provided branch or `master`
# After successfull creation, opens it in your web browser.
pull_request() {
    (
        set -x
        git push
        #shellcheck disable=2063
        hub pull-request -b "${1:-master}" -h "${$(git branch | grep \*)#'* '}" -o
    )
}

# Fuzzy finds branches except your current branch, returns the selected branch
fuzzy_branch() {
    git branch | grep -Ev '\*' | fuzzy_select | tr -d ' '
}

switch_branch() {
    if [[ -n $1 ]]; then
        git checkout "$1"
    else
        branch=$(fuzzy_branch)
        if [[ -n $branch ]]; then
            git checkout "$branch"
        fi
    fi
}

branch_delete() {
    branch=${1:-$(fuzzy_branch)}
    set -e
    if [[ -n $branch ]]; then
        git branch -D "$branch"
        echo -n "Delete from remote? [y/N]: "
        if read -rq; then
            set +e
            ( git push origin ":$branch" ) &
        fi
    fi
}

rage_delete_branches() {
    for branch in $(git branch | grep -Ev '\smaster$|^\*'); do
        echo -n "Delete branch '$branch' [yN]? "
        if read -rq; then
            echo
            bd "$branch"
        fi
    done
}

# Fuzzy finds a running proccess using `ps ax`
# shellcheck disable=2009
fp() {
    if [[ -n "$1" ]]; then ps ax | grep -v 'grep' | grep "$1";
    else ps ax | fuzzy_select; fi
}

