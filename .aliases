#!/bin/bash
set -o pipefail

# Common
alias c=clear
alias l="ls -lah"
alias ip="ifconfig en0 | grep 'inet ' | cut -f 2 -d ' '"

# Navigation
alias ..="cd .."
alias ...="cd ../.."

# Git
alias t="tig status"
alias g="git"
alias b=switch_branch
alias bd=branch_delete

# Github
alias ghpr=pull_request

# Xcode
alias decodeprovisioning="security cms -D -i"

h() {
    local selected

    # expand the history result in array
    selected=( $(fc -lEr 1 | fuzzy_select) )

    if [[ $? -ne 0 ]]; then
        return;
    fi

    # TODO: probably the better way is fetching from history on 1st arg
    print -z ${selected:3}
}


e() {
    local file
    if [[ $# -ne 1 ]]; then
        file=$(fzf --preview '[[ $(file --mime {}) =~ binary ]] &&
                         echo {} is a binary file ||
                         (highlight -O ansi {} || cat {}) 2> /dev/null | head -500')
        if [[ $? -ne 0 ]]; then
            return
        fi
    else
        file=$1
    fi

    # tmux rename-window "$(basename $file)"
    $EDITOR $file
}

# Open the current .xcworkspace or .xcodeproj
xc() {
    if [[ -n $1 ]]; then
        open "$1"
        return
    fi

    workspace=$(find . -name '*.xcworkspace' -maxdepth 1)
    project=$(find . -name '*.xcodeproj' -maxdepth 1)

    if [[ -n $workspace ]]; then
        open "$workspace"
    elif [[ -n $project ]]; then
        open "$project"
    else
        echo "No .xcworkspace or .xcodeproj found in the working directory."
    fi
}


# Fuzzy select input with a selector of choice (fzf, skim, selecta, pick...)
fuzzy_select() {
    finder="fzf"
    if [ -x "$(which $finder)" ]; then
        # ${finder}-tmux --color=bw
        ${finder}
    else
        echo "You need to install '$finder' to get the fuzzy finder"
        exit 1
    fi
}

pastegist() {
    open "$(gist -pP '$@')"
}

# Exctracts the repo slug from github. Works with https:// and git@ schemes.
github_slug(){
    print ${${$(git ls-remote --get-url)##*github.com(:|/)}%.git}
}

# Opens the file:line in github
open_in_github() {
    branch="${$(git branch | grep \*)#'* '}"
    hub browse -- "blob/$branch/$1#L$2"
}

# Code search repos across a github organization or user.
# Usage:
#     $ cs actionTimestampMs
cs() {
    github_slug=${${$(git ls-remote --get-url)##*github.com(:|/)}%.git}
    org=${github_slug%/*}
    open "https://github.com/search?q=org%3A$org+$1&type=Code"
}

# Creates a pull request on Github against the provided branch or `master`
# After successfull creation, opens it in your web browser.
pull_request() {
    (
        set -x
        git push
        #shellcheck disable=2063
        hub pull-request -b "${1:-master}" -h "${$(git branch | grep \*)#'* '}" -o
    )
}

# Fuzzy finds branches except your current branch, returns the selected branch
fuzzy_branch() {
    git branch | grep -Ev '\*' | fuzzy_select | tr -d ' '
}

switch_branch() {
    if [[ -n $1 ]]; then
        git checkout "$1"
    else
        branch=$(fuzzy_branch)
        if [[ -n $branch ]]; then
            git checkout "$branch"
        fi
    fi
}

branch_delete() {
    branch=${1:-$(fuzzy_branch)}
    set -e
    if [[ -n $branch ]]; then
        git branch -D "$branch"
        echo -n "Delete from remote? [y/N]: "
        if read -rq; then
            set +e
            ( git push origin ":$branch" ) &
        fi
    fi
}

rage_delete_branches() {
    for branch in $(git branch | grep -Ev '\smaster$|^\*'); do
        echo -n "Delete branch '$branch' [yN]? "
        if read -rq; then
            echo
            bd "$branch"
        fi
    done
}

# Fuzzy finds a running proccess using `ps ax`
# shellcheck disable=2009
fp() {
    if [[ -n "$1" ]]; then ps ax | grep -v 'grep' | grep "$1";
    else ps ax | fuzzy_select; fi
}

# Prints all the 256 term colors
printcolors() {
    for i in $(seq 0 255); do printf "\e[38;5;%dm colour%d" $i $i; done
}

# man(1) with colors!!!1!
man() {
    # shellcheck disable=SC2046
    env \
        LESS_TERMCAP_mb=$(printf "\e[1;31m") \
        LESS_TERMCAP_md=$(printf "\e[1;31m") \
        LESS_TERMCAP_me=$(printf "\e[0m") \
        LESS_TERMCAP_se=$(printf "\e[0m") \
        LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
        LESS_TERMCAP_ue=$(printf "\e[0m") \
        LESS_TERMCAP_us=$(printf "\e[1;32m") \
        man "$@"
}

# Search through your code directories and quickly open project folder
# For example:
# $ wo traz
#     -> will take me to ~/code/oss/Alcatraz
#
# $ wo <Enter>
#     -> Opens up the fuzzy finder for your code directories

# shellcheck disable=SC2086,2181
wo() {
    code_dirs=(
        $HOME/code
        $HOME/code/go/src
    )
    dir_list=$(find "${code_dirs[@]}" -maxdepth 3 -type d)

    if [[ -n $1 ]]; then
        dir=$(grep --max-count=1 -i "$*" <<< $dir_list)
    else
        dir=$(grep -v /Pods <<< $dir_list | fuzzy_select)
    fi

    if [[ $? -ne 0 ]]; then return; fi

    cd "$dir" || return
    if [[ -x tmux ]]; then
        tmux rename-window "$(basename $dir)"
    fi
}

# Danger zone
p() {
    (
        set -euo pipefail
        cd ~/.password-store/Password
        file=$(rg --files | fuzzy_select)
        pass -c "Password/${file%.gpg}"
    )
}

pe() {
    (
        set -euo pipefail
        cd ~/.password-store/Password
        file=$(rg --files | fuzzy_select)
        pass edit "Password/${file%.gpg}"
    )
}

pg() {
    protocol="$(echo $1 | grep :// | sed -e's,^\(.*://\).*,\1,g')"
    url="$(echo ${1/$protocol/})"
    user="$(echo $url | grep @ | cut -d@ -f1)"
    host="$(echo ${url/$user@/} | cut -d/ -f1)"
    
    name=${$(echo $host | rev | cut -d. -f1-2 | rev)/.*/}
    capitalized="$(tr '[:lower:]' '[:upper:]' <<< ${name:0:1})${name:1}"
    echo -n "Name for the new password [$capitalized]: "
    read -r input 
    if [[ -n $input ]]; then
        echo "Using new: $input"
        pwname=$input
    else
        echo "Using default: $capitalized"
        pwname=$capitalized
    fi

    pass insert --multiline "Password/$host/$pwname"
}

pw() {
    (
        set -euo pipefail
        cd ~/.password-store/Password

        IFS=$'\n'
        file=${1:-"$(rg --files | fuzzy_select)"}
        contents=$(gpg --decrypt --quiet "$file")

        paswd=$(printf "%s" "$contents" | head -n 1)
        login="${$(printf "%s" "$contents" | grep '^username:')#'username: '}"

        printf "%s" "$login" | pbcopy
        printf "%s" "Username copied to the clipboard. Press Enter when ready."

        #shellcheck disable=2034
        read -r enter
        printf "%s" "$paswd" | pbcopy
        echo "Password copied to the clipboard. Make sure you trash it."
    )
}

pwo() {
    (
        set -euo pipefail
        cd ~/.password-store/Password
        file=$(rg --files | fuzzy_select)
        site=${file%.gpg}
        open "http://${site/*\//}"
        pw "$file"
    )
}

s() {
    (
        set -euo pipefail
        cd ~/.password-store
        file=$(rg --files | fuzzy_select)
        gpg --decrypt --quiet "$file"
    )
}

cc() {
    (
        set -euo pipefail
        cd ~/.password-store/Credit-Card

        cc_data=$(gpg --decrypt --quiet "$(rg --files | fuzzy_select)")
        cc_num=$(echo "$cc_data" | grep '^number' | sed 's/number: //')

        printf "%s" "$cc_num" | pbcopy
        echo "Copied $cc_num to clipboard"
        echo "$cc_data"
    )
}
