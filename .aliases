#!/bin/bash
set -o pipefail

# Common
alias c=clear
alias la="ls -lah"
alias ccat="pygmentize -g"
alias json="python -m json.tool | pygmentize -l json"

# Navigation
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."

# Git
alias b=switch_branch
alias bd=branch_delete
alias bm=branch_merge
alias gp="git push --recurse-submodules=on-demand"
alias gl="git pull --rebase --stat"
alias gf="git fetch"
alias gs="tig status"
alias gd="git diff"
alias gdi="git diff --ignore-all-space"
alias ga="git add"
alias gc="git_commit"

# Github
alias ghpr=pull_request
alias pm="pulls supermarin"

# Bundler
alias be="bundle exec"
alias bi="bundle install"
alias bu="bundle update"

# CocoaPods
alias pi="pod install"
alias pu="pod update"

# Xcode
alias stupidXcode="rm -rf ~/Library/Developer/Xcode/DerivedData"
alias decodeprovisioning="security cms -D -i"

# Bookmarks
alias gifs="open http://f.cl.ly/items/1D1A1w06470M1U2P0311/gifs.txt"

# ripgrep stupid hack because it still doesn't support ~/.rgrc
# shellcheck disable=2139
{
    alias rg="rg $RG_DEFAULT_OPTIONS"
    alias g="tag rg $RG_DEFAULT_OPTIONS"
}


h() {
    local selected

    # expand the history result in array
    selected=( $(fc -rlE 1 | fuzzy_select) )

    if [[ $? -ne 0 ]]; then
        return;
    fi

    # TODO: probably the better way is fetching from history on 1st arg
    print -z ${selected:3}
}


e() {
    local file
    if [[ $# -ne 1 ]]; then
        file=$(fzf --preview '[[ $(file --mime {}) =~ binary ]] &&
                         echo {} is a binary file ||
                         (highlight -O ansi {} || cat {}) 2> /dev/null | head -500')

        if [[ $? -ne 0 ]]; then
            return
        fi
    else
        file=$1
    fi

    # tmux rename-window "$(basename $file)"
    $EDITOR $file
}

tag() {
    # shellcheck disable=1090
    command tag "$@" && source "/tmp/tag_aliases_$USER" 2>/dev/null
}

# Open the current .xcworkspace or .xcodeproj
xc() {
    if [[ -n $1 ]]; then
        open "$1"
        return
    fi

    workspace=$(find . -name '*.xcworkspace' -maxdepth 1)
    project=$(find . -name '*.xcodeproj' -maxdepth 1)

    if [[ -n $workspace ]]; then
        open "$workspace"
    elif [[ -n $project ]]; then
        open "$project"
    else
        echo "No .xcworkspace or .xcodeproj found in the working directory."
    fi
}



notes() {
    $EDITOR ~/Sync/notes
}

# Fuzzy select input with a selector of choice (fzf, skim, selecta, pick...)
fuzzy_select() {
    finder="fzf"
    if [ -x "$(which $finder)" ]; then
        ${finder}-tmux --color=bw
    else
        echo "You need to install '$finder' to get the fuzzy finder"
        exit 1
    fi
}

pastegist() {
    open "$(gist -pP '$@')"
}

# Exctracts the repo slug from github. Works with https:// and git@ schemes.
github_slug(){
    print ${${$(git ls-remote --get-url)##*github.com(:|/)}%.git}
}

# Code search repos across a github organization or user.
# Usage:
#     $ cs actionTimestampMs
cs() {
    github_slug=${${$(git ls-remote --get-url)##*github.com(:|/)}%.git}
    org=${github_slug%/*}
    open "https://github.com/search?q=org%3A$org+$1&type=Code"
}

# See git log for the work done on the current branch against `master` or the
# specified branch.
# Usage: b [branch] (default: master)
bl() {
    git l "${1:-origin}"..HEAD "$@"
}

pulls() {
    open "https://github.com/$(github_slug)/pulls/$1"
}

issues() {
    open "https://github.com/$(github_slug)/issues/$1"
}

# Creates a pull request on Github against the provided branch or `master`
# After successfull creation, opens it in your web browser.
pull_request() {
    (
        set -x
        git push
        #shellcheck disable=2063
        hub pull-request -b "${1:-master}" -h "${$(git branch | grep \*)#'* '}" -o
    )
}

# Side by side diff using `icdiff`.
# Usage:
#     $ gds
#     $ gds --cached
#     $ gds origin/master
gds() {
    git difftool --extcmd "icdiff --highlight --line-numbers" "$@" | less -R
}

# Usage:
#       $ gc handle cli argumnents. Fixes #213
git_commit() {
    set +u
    if [[ -n $1 ]]; then
        git add .
        git commit -am "$*"
    else
        git commit -v
    fi
}

# Jira....
jira() {
    if [[ -n $1 ]]; then
        open \
        "http://jira.lyft.net/secure/QuickSearch.jspa?searchString=${1// /+}"

    else
        open https://jira.lyft.net/issues/\?filter=-1
    fi
}

confluence() {
    open "https://lyftme.atlassian.net/wiki"
}

# Fuzzy finds branches except your current branch, returns the selected branch
fuzzy_branch() {
    git branch | grep -Ev '\*' | fuzzy_select | tr -d ' '
}

switch_branch() {
    if [[ -n $1 ]]; then
        git checkout "$1"
    else
        branch=$(fuzzy_branch)
        if [[ -n $branch ]]; then
            git checkout "$branch"
        fi
    fi
}

branch_delete() {
    branch=${1:-$(fuzzy_branch)}
    set -e
    if [[ -n $branch ]]; then
        git branch -D "$branch"
        echo -n "Delete from remote? [y/N]: "
        if read -rq; then
            set +e
            ( git push origin ":$branch" ) &
        fi
    fi
}

branch_merge() {
    branch=$(fuzzy_branch)
    if [[ -n $branch ]]; then
        git merge "$branch"
    fi
}

rage_delete_branches() {
    for branch in $(git branch | grep -Ev '\smaster$|^\*'); do
        echo -n "Delete branch '$branch' [yN]? "
        if read -rq; then
            echo
            bd "$branch"
        fi
    done
}

# Fuzzy finds a running proccess using `ps ax`
# shellcheck disable=2009
fp() {
    if [[ -n "$1" ]]; then ps ax | grep -v 'grep' | grep "$1";
    else ps ax | fuzzy_select; fi
}

# man(1) with colors!!!1!
man() {
    # shellcheck disable=SC2046
    env \
        LESS_TERMCAP_mb=$(printf "\e[1;31m") \
        LESS_TERMCAP_md=$(printf "\e[1;31m") \
        LESS_TERMCAP_me=$(printf "\e[0m") \
        LESS_TERMCAP_se=$(printf "\e[0m") \
        LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
        LESS_TERMCAP_ue=$(printf "\e[0m") \
        LESS_TERMCAP_us=$(printf "\e[1;32m") \
        man "$@"
}

# Search through your code directories and quickly open project folder
# For example:
# $ wo traz
#     -> will take me to ~/code/oss/Alcatraz
#
# $ wo <Enter>
#     -> Opens up the fuzzy finder for your code directories

# shellcheck disable=SC2086,2181
wo() {
    code_dirs=(
        $HOME/code
        $HOME/code/go/src
    )
    dir_list=$(find "${code_dirs[@]}" -maxdepth 3 -type d | grep -v /Pods)

    if [[ -n $1 ]]; then
        dir=$(grep --max-count=1 -i "$*" <<< $dir_list)
    else
        dir=$(grep -v /Pods <<< $dir_list | fuzzy_select)
    fi

    if [[ $? -ne 0 ]]; then return; fi

    cd "$dir" || return
    tmux rename-window "$(basename $dir)"
}

# Danger zone
p() {
    (
        set -euo pipefail
        cd ~/.password-store/Password
        file=$(rg --files | fuzzy_select)
        pass -c "Password/${file%.gpg}"
    )
}

pe() {
    (
        set -euo pipefail
        cd ~/.password-store/Password
        file=$(rg --files | fuzzy_select)
        pass edit "Password/${file%.gpg}"
    )
}

pw() {
    (
        set -euo pipefail
        cd ~/.password-store/Password

        IFS=$'\n'
        file=${1:-"$(rg --files | fuzzy_select)"}
        contents=$(gpg --decrypt --quiet "$file")

        paswd=$(printf "%s" "$contents" | head -n 1)
        login="${$(printf "%s" "$contents" | grep '^username:')#'username: '}"

        printf "%s" "$login" | pbcopy
        printf "%s" "Username copied to the clipboard. Press Enter when ready."

        #shellcheck disable=2034
        read -r enter
        printf "%s" "$paswd" | pbcopy
        echo "Password copied to the clipboard. Make sure you trash it."
    )
}

pwo() {
    (
        set -euo pipefail
        cd ~/.password-store/Password
        file=$(rg --files | fuzzy_select)
        site=${file%.gpg}
        open "http://${site/*\//}"
        pw "$file"
    )
}

s() {
    (
        set -euo pipefail
        cd ~/.password-store
        file=$(rg --files | fuzzy_select)
        gpg --decrypt --quiet "$file"
    )
}

cc() {
    (
        set -euo pipefail
        cd ~/.password-store/Credit-Card

        cc_data=$(gpg --decrypt --quiet "$(rg --files | fuzzy_select)")
        cc_num=$(echo "$cc_data" | grep '^number' | sed 's/number: //')

        printf "%s" "$cc_num" | pbcopy
        echo "Copied $cc_num to clipboard"
        echo "$cc_data"
    )
}

h() {
    local selected

    # expand the history result in array
    selected=( $(fc -rlE 1 | fuzzy_select) )

    if [[ $? -ne 0 ]]; then
        return;
    fi

    # TODO: probably the better way is fetching from history on 1st arg
    print -z ${selected:3}
}


e() {
    local file
    if [[ $# -ne 1 ]]; then
        file=$(fzf --preview '[[ $(file --mime {}) =~ binary ]] &&
                         echo {} is a binary file ||
                         (highlight -O ansi {} || cat {}) 2> /dev/null | head -500')

        if [[ $? -ne 0 ]]; then
            return
        fi
    else
        file=$1
    fi

    # tmux rename-window "$(basename $file)"
    $EDITOR $file
}

