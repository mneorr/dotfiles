#!/bin/bash

# System overrides
alias rm=trash

# override vim
alias vi=nvim

# Common
alias c=clear
alias h="fzf --history=$HOME/.zhistory --history-size=1000000000000000"
alias la="ls -lah"
alias ccat="pygmentize -g"
alias json="python -m json.tool | pygmentize -l json"

# Navigation
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."

# Git
alias b=switch_branch
alias bd=branch_delete
alias bm=branch_merge
alias gp="git push --recurse-submodules=on-demand"
alias gl="git pull --rebase --stat"
alias gf="git fetch"
alias gs="tig status"
alias gd="git diff"
alias gdi="git diff --ignore-all-space"
alias gds="git difftool \
                --extcmd 'icdiff --highlight --line-numbers' | less"
alias gdsi="git difftool --ignore-all-space \
                --extcmd 'icdiff --highlight --line-numbers' | less"
alias ga="git add"
alias gc="git_commit"

# Github
alias ghpr=pull_request
alias pm="pulls supermarin"

# Bundler
alias be="bundle exec"
alias bi="bundle install"
alias bu="bundle update"

# CocoaPods
alias pi="pod install"
alias pu="pod update"

# ripgrep
# stupid hack because it still doesn't support ~/.rgrc
alias rg="rg $RG_DEFAULT_OPTIONS"

# Xcode
alias stupidXcode="rm -rf ~/Library/Developer/Xcode/DerivedData"
alias decodeprovisioning="security cms -D -i"

# Bookmarks
alias gifs="open http://f.cl.ly/items/1D1A1w06470M1U2P0311/gifs.txt"

# Open the current .xcworkspace or .xcodeproj
xc() {
    if [[ -n $1 ]]; then
        open "$1"
    fi

    workspace=$(find . -name '*.xcworkspace' -maxdepth 1)
    project=$(find . -name '*.xcodeproj' -maxdepth 1)

    if [[ -n $workspace ]]; then
        open "$workspace"
    elif [[ -n $project ]]; then
        open "$project"
    else
        echo "No .xcworkspace or .xcodeproj found in the working directory."
    fi
}

# Fuzzy select input with a selector of choice (fzf, skim, selecta, pick...)
fuzzy_select() {
    finder="sk"
    if [ -x "$(which $finder)" ]; then
        ${finder}-tmux --color=bw
    else
        echo "You need to install '$finder' to get the fuzzy finder"
        exit 1
    fi
}

# Quickly edit file
ef() {
    file=$(fuzzy_select) || false && $EDITOR "$file"
}

pastegist() {
    open "$(gist -pP $*)"
}

github_slug(){
    git ls-remote --get-url origin | cut -f 2 -d ':' | cut -f 1 -d '.'
}

# See git log for the work done on the current branch against `master` or the
# specified branch.
# Usage: b [branch] (default: master)
bl() {
    git l "${1:-origin}"..HEAD "$@"
}

pulls() {
    open "https://github.com/$(github_slug)/pulls/$1"
}

issues() {
    open "https://github.com/$(github_slug)/issues/$1"
}

# Creates a pull request on Github against the provided branch or `master`
# After successfull creation, opens it in your web browser.
pull_request() {
    if [[ -n $1 ]]; then
        branch=$1
    else
        branch=master
    fi
    git push
    hub pull-request -b $branch -o
}

# Usage:
#       $ gc handle cli argumnents. Fixes #213
git_commit() {
  if [[ -n $1 ]]; then
      git add .
      git commit -am "$*"
  else
      git commit -v
  fi
}

# Jira....
jira() {
    if [[ -n $1 ]]; then
        open "https://lyftme.atlassian.net/browse/$1"
    else
        open https://lyftme.atlassian.net/issues/\?filter=-1
    fi
}

confluence() {
    open "https://lyftme.atlassian.net/wiki"
}

# Fuzzy finds branches except your current branch, returns the selected branch
fuzzy_branch() {
    git branch | grep -Ev '\*' | fuzzy_select | tr -d ' '
}

switch_branch() {
    if [[ -n $1 ]]; then
        git checkout "$1"
    else
        branch=$(fuzzy_branch)
        if [[ -n $branch ]]; then
            git checkout "$branch"
        fi
    fi
}

branch_delete() {
    #set -e
    branch=$(fuzzy_branch)
    if [[ -n $branch ]]; then
        git branch -D "$branch"
        echo "Delete from remote? [y/N]: "
        read -r delete_from_remote
        if [[ $delete_from_remote = 'y' ]]; then
            git push origin ":$branch"
        else
            echo "Not deleting from remote."
        fi
    fi
}

branch_merge() {
    branch=$(fuzzy_branch)
    if [[ -n $branch ]]; then
        git merge "$branch"
    fi
}

rage_delete_branches() {
    for branch in $(git branch | grep -Ev '\smaster$|^\*'); do
        echo "Delete branch '$branch'?"
        read -r confirm
        if [[ $confirm = 'y' ]]; then
            git branch -D "$branch"
        fi
    done
}

# Fuzzy finds a running proccess using `ps ax`
fp() {
    if [[ -n "$1" ]]; then ps ax | grep -v 'grep' | grep $1;
    else ps ax | fuzzy_select; fi
}

# man(1) with colors!!!1!
man() {
    # shellcheck disable=SC2046
    env \
        LESS_TERMCAP_mb=$(printf "\e[1;31m") \
        LESS_TERMCAP_md=$(printf "\e[1;31m") \
        LESS_TERMCAP_me=$(printf "\e[0m") \
        LESS_TERMCAP_se=$(printf "\e[0m") \
        LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
        LESS_TERMCAP_ue=$(printf "\e[0m") \
        LESS_TERMCAP_us=$(printf "\e[1;32m") \
        man "$@"
}

# Search through your code directories and quickly open project folder
# For example:
# $ wo traz
#     -> will take me to ~/code/oss/Alcatraz
#
# $ wo <Enter>
#     -> Opens up the fuzzy finder for your code directories

# shellcheck disable=SC2086
wo() {
    code_dirs=(
        $HOME/code
        $HOME/code/go/src
    )
    dir_list=$(find "${code_dirs[@]}" -maxdepth 3 -type d | grep -v /Pods)

    if [[ -n $1 ]]; then
        dir=$(grep --max-count=1 -i "$*" <<< $dir_list)
    else
        dir=$(grep -v /Pods <<< $dir_list | fuzzy_select)
    fi

    if [[ $? -ne 0 ]]; then return; fi

    cd "$dir"
    tmux rename-window "$(basename $dir)"
}
