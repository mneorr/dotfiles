set global startup_info_version 20190122
###############################################################################
# PLUGINS
###############################################################################

# Plugin manager. See if I can get rid of this
source "%val{config}/plugins/plug.kak/rc/plug.kak"

# FZF
plug "andreyorst/fzf.kak"
set-option global fzf_file_command 'rg'

# LSP
define-command lspe %{
    eval %sh{kak-lsp --kakoune -s $kak_session}
    lsp-enable
}

# Default tabs 4 spaces instead of 8
set global tabstop 4


###############################################################################
# EDITOR SETTINGS
###############################################################################
# Automatically reload files on change
set global autoreload yes

# Spaces > Tabs
hook global InsertChar \t %{ exec -draft -itersel h@ } -group kakrc-replace-tabs-with-spaces

# add brackets highlighting
hook global WinCreate .* %{add-highlighter window/ show-matching}

# no clippy
set global ui_options ncurses_assistant=off

# Unfuck copy/paste
hook global NormalKey y|d|c %{ nop %sh{
      printf %s "$kak_main_reg_dquote" | pbcopy
}}
map global user p '<a-!>pbpaste<ret>'
map global user P '!pbpaste<ret>'

# Don't autocomplete before 250ms
set global idle_timeout 250

###############################################################################
# MAPPINGS
###############################################################################

# Remap leader to space
map global normal <space> ,
map global normal <backspace> <space>       -docstring 'remove all sels except main'
map global normal <a-backspace> <a-space>   -docstring 'remove main sel'

map global user h ': lsp-hover<ret>' -docstring 'LSP hover'
map global user d ': lsp-definition<ret>' -docstring 'LSP Go to definition'
map global user f ': fzf-mode<ret>' -docstring 'FZF mode'

# Comment/uncomment with <leader> /
map global user / :comment-line<ret>

###############################################################################
# GIT
###############################################################################

declare-user-mode git
map global user g ': enter-user-mode git<ret>' -docstring 'Git mode'
map global git l ': repl "tig"<ret>' -docstring 'show Git log'
map global git b ': repl "tig blame +%val{cursor_line} %val{buffile}"<ret>' -docstring 'show blame (with tig)'
map global git s ': repl "tig status"<ret>' -docstring 'show status (with tig)'

# Open in Github
define-command open-in-github -docstring 'Open current file:line in Github' %{ evaluate-commands %sh{
    $SHELL --login -c "open_in_github ${kak_bufname} ${kak_cursor_line}"
}}
map global git g ':open-in-github <ret>' -docstring 'Open current file:line in Github' 

###############################################################################

# Sublime style multi cursors
define-command -override -docstring "select a word under cursor, or add cursor on next occurrence of current selection" \
select-or-add-cursor %{ execute-keys -save-regs '' %sh{
    if [ $(expr $(echo $kak_selection | wc -m) - 1) -eq 1 ]; then
        echo "<a-i>w*"
    else
        echo "*<s-n>"
    fi
}}

map global normal '<c-n>' ': select-or-add-cursor<ret>' -docstring "add cursor on current word, and jump to the next match" 

# splits with tmux
declare-user-mode split
map global user s ': enter-user-mode split<ret>' -docstring 'Split mode'
map global split h ':tmux-terminal-vertical kak -c %val{session}<ret>' -docstring 'Split horizontal'
map global split v ':tmux-terminal-horizontal kak -c %val{session}<ret>' -docstring 'Split vertical'

